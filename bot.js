const fs = require('fs');
const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');

// Banner
console.log(`
       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
      ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
      ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  
        By : ADB NODE
`);

// Function to get current date and time
const getTimestamp = () => {
    return new Date().toLocaleString('en-US', { timeZone: 'UTC' });
};

const API_KEY = "YOUR_API_KEY"; // ·Äí·ÄÆ·Äî·Ä±·Äõ·Ä¨·Äô·Äæ·Ä¨ ·Äû·ÄÑ·Ä∑·Ä∫ 2Captcha API key ·Äë·Ää·Ä∑·Ä∫·Äï·Ä´
const SITEKEY = "0x4AAAAAAA47SsoQAdSW6HIy";
const FAUCET_URL = "https://faucet-api.testnet.initia.xyz/claim";
const WALLET_FILE = "wallet.txt";
const PROXY_FILE = "proxy.txt";

function loadProxies(filePath) {
    return fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf-8').split('\n').map(line => line.trim()).filter(line => line) : [];
}

function getRandomProxy(proxies) {
    return proxies.length > 0 ? proxies[Math.floor(Math.random() * proxies.length)] : null;
}

async function solveCaptcha(proxy) {
    console.log(`[${getTimestamp()}] ‚è≥ Waiting for CAPTCHA to be solved...`);
    try {
        let agent = proxy ? new HttpsProxyAgent(proxy) : undefined;
        let response = await axios.post("http://2captcha.com/in.php", null, {
            params: {
                key: API_KEY,
                method: "turnstile",
                json: 1,
                pageurl: "https://app.testnet.initia.xyz",
                sitekey: SITEKEY
            },
            httpsAgent: agent
        });

        if (response.data.status !== 1) {
            console.log(`[${getTimestamp()}] ‚ùå Failed to get CAPTCHA ID!`);
            return null;
        }

        let captchaId = response.data.request;

        for (let i = 0; i < 30; i++) {
            await new Promise(resolve => setTimeout(resolve, 5000));
            let result = await axios.get("http://2captcha.com/res.php", {
                params: {
                    key: API_KEY,
                    action: "get",
                    id: captchaId,
                    json: 1
                },
                httpsAgent: agent
            });
            if (result.data.status === 1) {
                console.log(`[${getTimestamp()}] ‚úÖ CAPTCHA successfully solved!`);
                return result.data.request;
            }
        }
    } catch (error) {
        console.error(`[${getTimestamp()}] ‚ö†Ô∏è Error while solving CAPTCHA: ${error.message}`);
    }
    console.log(`[${getTimestamp()}] ‚ùå Failed to get CAPTCHA solution within time limit!`);
    return null;
}

function loadWallets(filePath) {
    return fs.readFileSync(filePath, 'utf-8').split('\n').map(line => line.trim()).filter(line => line);
}

async function claimFaucet(wallet, proxy) {
    console.log(`[${getTimestamp()}] üîÑ Claiming faucet for wallet: ${wallet}`);
    let turnstileToken = await solveCaptcha(proxy);
    if (!turnstileToken) {
        console.log(`[${getTimestamp()}] ‚ùå Skipping wallet due to failure to obtain CAPTCHA token.`);
        console.log(`[${getTimestamp()}] ‚è≥ Waiting 60 seconds before the next claim...`);
        await new Promise(resolve => setTimeout(resolve, 60000)); // 60 ·ÄÖ·ÄÄ·Äπ·ÄÄ·Äî·Ä∑·Ä∫ delay
        return;
    }

    let data = {
        address: wallet,
        turnstile_response: turnstileToken
    };
    
    let agent = proxy ? new HttpsProxyAgent(proxy) : undefined;

    for (let i = 0; i < 3; i++) {  // Try claiming up to 3 times
        try {
            let response = await axios.post(FAUCET_URL, data, {
                headers: {
                    "accept": "application/json, text/plain, */*",
                    "content-type": "application/json",
                    "origin": "https://app.testnet.initia.xyz",
                    "referer": "https://app.testnet.initia.xyz/",
                    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36"
                },
                httpsAgent: agent
            });
            console.log(`[${getTimestamp()}] ‚úÖ Claim successful for ${wallet}`);
            console.log(`[${getTimestamp()}] ‚è≥ Waiting 60 seconds before the next claim...`);
            await new Promise(resolve => setTimeout(resolve, 60000)); // 60 ·ÄÖ·ÄÄ·Äπ·ÄÄ·Äî·Ä∑·Ä∫ delay
            return;
        } catch (error) {
            console.log(`[${getTimestamp()}] ‚ùå Claim failed (Attempt ${i + 1}) for ${wallet}: ${error.message}`);
            if (i < 2) { // Retry ·Äô·ÄÄ·ÄØ·Äî·Ä∫·Äû·Ä±·Ä∏·Äõ·ÄÑ·Ä∫ 30 ·ÄÖ·ÄÄ·Äπ·ÄÄ·Äî·Ä∑·Ä∫ ·ÄÖ·Ä±·Ä¨·ÄÑ·Ä∑·Ä∫·Äï·Äº·ÄÆ·Ä∏ ·Äë·Äï·Ä∫·ÄÄ·Äº·Ä≠·ÄØ·Ä∏·ÄÖ·Ä¨·Ä∏
                console.log(`[${getTimestamp()}] ‚è≥ Waiting 30 seconds before trying again...`);
                await new Promise(resolve => setTimeout(resolve, 30000));
            }
        }
    }

    // Retry 3 ·ÄÄ·Äº·Ä≠·Äô·Ä∫·Äú·ÄØ·Ä∂·Ä∏ ·Äô·Ä°·Ä±·Ä¨·ÄÑ·Ä∫·Äô·Äº·ÄÑ·Ä∫·Äõ·ÄÑ·Ä∫ ·Äí·ÄÆ·Äî·Ä±·Äõ·Ä¨·ÄÄ·Ä≠·ÄØ ·Äõ·Ä±·Ä¨·ÄÄ·Ä∫·Äú·Ä¨·Äô·Äö·Ä∫
    console.log(`[${getTimestamp()}] ‚ùå All attempts failed for ${wallet}`);
    console.log(`[${getTimestamp()}] ‚è≥ Waiting 60 seconds before the next claim...`);
    await new Promise(resolve => setTimeout(resolve, 60000)); // 60 ·ÄÖ·ÄÄ·Äπ·ÄÄ·Äî·Ä∑·Ä∫ delay
}

async function startAutoClaim() {
    let proxies = loadProxies(PROXY_FILE);
    while (true) {
        let wallets = loadWallets(WALLET_FILE);
        for (let wallet of wallets) {
            let proxy = getRandomProxy(proxies);
            await claimFaucet(wallet, proxy);
        }
        console.log(`[${getTimestamp()}] ‚è≥ Waiting 8 hours before claiming again...`);
        await new Promise(resolve => setTimeout(resolve, (28800 + 60) * 1000)); // 8 ·Äî·Ä¨·Äõ·ÄÆ + 1 ·Äô·Ä≠·Äî·ÄÖ·Ä∫
    }
}

startAutoClaim();
